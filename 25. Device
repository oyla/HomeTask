/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication27_4;

/**
 *
 * @author user
 */
class DeviceArray {

    private int capacity = 13;
    private int count = 0;
    private Device[] devices;

    public DeviceArray() {
        this(13);
    }

    public DeviceArray(int capacity) {
        setCapacity(capacity);
        devices = new Device[capacity];
    }

    public boolean isEmpty() {
        return count == 0;
    }

    /**
     * @return the capacity
     */
    public int getCapacity() {
        return capacity;
    }

    /**
     * @return the count
     */
    public int getCount() {
        return count;
    }

    /**
     * @return the devices
     */
    public Device[] getDevices() {
        if (isEmpty()) {
            return null;
        }
        Device[] newDevices = new Device[count];
        for (int i = 0; i < count; i++) {
            newDevices[i] = getElementAt(i);
        }
        return newDevices;
    }

    private void ensureCapacity(int arrLength) {
        if (arrLength > capacity) {
            setCapacity((arrLength * 3) / 2 + 1);
        }
    }

    public void setCapacity(int capacity) {
        if (isEmpty() || capacity <= 0) {
            capacity = 13;
        }
        if (this.capacity < capacity) {
            this.capacity = capacity;
            overwriteData();
        }
    }

    private void overwriteData() {
        Device[] temp = new Device[capacity];
        for (int i = 0; i < count; i++) {
            temp[i] = devices[i];
        }
        devices = temp;
    }

    public void addDevice(Device newDevice) {
        ensureCapacity(count + 1);
        setElementAt(count++, newDevice);
    }

    public boolean setElementAt(int index, Device device) {
        if (index >= 0 && index < count) {
            devices[index] = device;
            return true;
        }
        return false;
    }

    public Device getElementAt(int index) {
        if (index >= 0 && index < count) {
            Device s;
            s = devices[index];
            return s;
        }
        return null;
    }

    public boolean removeElementAt(int index) {
        if (index >= 0 && index < count) {
            for (int i = index; i < count - 1; i++) {
                devices[i] = devices[i + 1];
            }
            count--;
            return true;
        }
        return false;
    }

    public boolean changeParameters(int index, String parameter, String value) {
        if (index >= 0 && index < count) {
            Device device = devices[index];
            if ((device instanceof Usb) && parameter == "speedUsb") {
                devices[index] = new Usb(device.getManufacturer(), device.getModel(), device.getName(), device.getCapacity(), device.getCount(), value);
            } else if ((device instanceof PortableHardDrive) && parameter == "spindleSpeed") {
                devices[index] = new PortableHardDrive(device.getManufacturer(), device.getModel(), device.getName(), device.getCapacity(), device.getCount(), value);
            } else if ((device instanceof Dvd) && parameter == "recordingSpeed") {
                devices[index] = new Dvd(device.getManufacturer(), device.getModel(), device.getName(), device.getCapacity(), device.getCount(), value);
            } else {
                switch (parameter) {
                    case "manufacturer":
                        device.setManufacturer(value);
                        break;
                    case "model":
                        device.setModel(value);
                        break;
                    case "name":
                        device.setName(value);
                        break;
                    case "capacity":
                        device.setCapacity(value);
                        break;
                    case "count":
                        device.setCount(Integer.parseInt(value));
                        break;
                    default:
                        break;
                }
            }
        }
        return false;
    }

    public String print() {
        if (isEmpty()) {
            return "Device Array is empty.";
        }
        String s = "";
        for (int i = 0; i < count; i++) {
            if (i > 0) {
                s += "\n\n";
            }
            s += String.format("%-20s", "index:");
            s += i + "\n";
            s += devices[i].print();
        }
        return s;
    }

    public String printByIndex(int index) {
        if (index >= 0 && index < count) {
            return devices[index].print();
        }
        return "Device not found";
    }
}

abstract class Device {

    private String manufacturer = "";
    private String model = "";
    private String name = "";
    private String capacity = "";
    private int count = 0;

    Device() {

    }

    public Device(String manufacturer, String model, String name, String capacity, int count) {
        setManufacturer(manufacturer);
        setModel(model);
        setName(name);
        setCapacity(capacity);
        setCount(count);
    }

    /**
     * @return the manufacturer
     */
    public String getManufacturer() {
        return manufacturer;
    }

    /**
     * @return the model
     */
    public String getModel() {
        return model;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the capacity
     */
    public String getCapacity() {
        return capacity;
    }

    /**
     * @return the count
     */
    public int getCount() {
        return count;
    }

    /**
     * @param manufacturer the manufacturer to set
     */
    public void setManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
    }

    /**
     * @param model the model to set
     */
    public void setModel(String model) {
        this.model = model;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @param capacity the capacity to set
     */
    public void setCapacity(String capacity) {
        this.capacity = capacity;
    }

    /**
     * @param count the count to set
     */
    public void setCount(int count) {
        this.count = count;
    }

    public String print() {
        if (this == null) {
            return "Device is not exist.";
        }
        String s = String.format("%-20s", "device type:");
        s += getClass().getSimpleName();
        s += "\n" + String.format("%-20s", "manufacturer:");
        s += manufacturer;
        s += "\n" + String.format("%-20s", "model:");
        s += model;
        s += "\n" + String.format("%-20s", "name:");
        s += name;
        s += "\n" + String.format("%-20s", "capacity:");
        s += capacity;
        s += "\n" + String.format("%-20s", "count:");
        s += count;
        return s;
    }

    abstract public boolean load();

    abstract public boolean save();
}

class Usb extends Device {

    private String speedUsb = "";

    Usb() {

    }

    public Usb(String manufacturer, String model, String name, String capacity, int count, String speedUsb) {
        super(manufacturer, model, name, capacity, count);
        setSpeedUsb(speedUsb);
    }

    /**
     * @return the speedUsb
     */
    public String getSpeedUsb() {
        return speedUsb;
    }

    /**
     * @param speedUsb the speedUsb to set
     */
    public void setSpeedUsb(String speedUsb) {
        this.speedUsb = speedUsb;
    }

    @Override
    public String print() {
        String s = super.print();
        s += "\n" + String.format("%-20s", "speed usb:");
        s += speedUsb;
        return s;
    }

    @Override
    public boolean load() {
        return false;
    }

    @Override
    public boolean save() {
        return false;
    }
}

class PortableHardDrive extends Device {

    private String spindleSpeed = "";

    public PortableHardDrive() {
    }

    public PortableHardDrive(String manufacturer, String model, String name, String capacity, int count, String spindleSpeed) {
        super(manufacturer, model, name, capacity, count);
        setSpindleSpeed(spindleSpeed);
    }

    /**
     * @return the spindleSpeed
     */
    public String getSpindleSpeed() {
        return spindleSpeed;
    }

    /**
     * @param spindleSpeed the spindleSpeed to set
     */
    public void setSpindleSpeed(String spindleSpeed) {
        this.spindleSpeed = spindleSpeed;
    }

    @Override
    public String print() {
        String s = super.print();
        s += "\n" + String.format("%-20s", "spindle speed:");
        s += spindleSpeed;
        return s;
    }

    @Override
    public boolean load() {
        return false;
    }

    @Override
    public boolean save() {
        return false;
    }
}

class Dvd extends Device {

    private String recordingSpeed = "";

    Dvd(String manufacturer, String model, String name, String capacity, int count, String recordingSpeed) {
        super(manufacturer, model, name, capacity, count);
        setRecordingSpeed(recordingSpeed);
    }

    Dvd() {

    }

    /**
     * @return the recordingSpeed
     */
    public String getRecordingSpeed() {
        return recordingSpeed;
    }

    /**
     * @param recordingSpeed the recordingSpeed to set
     */
    public void setRecordingSpeed(String recordingSpeed) {
        this.recordingSpeed = recordingSpeed;
    }

    @Override
    public String print() {
        String s = super.print();
        s += "\n" + String.format("%-20s", "recording speed:");
        s += recordingSpeed;
        return s;
    }

    @Override
    public boolean load() {
        return false;
    }

    @Override
    public boolean save() {
        return false;
    }
}

class Searcher {

    private Device[] devices;

    public Searcher() {
    }

    public Searcher(Device[] devices) {
        setDevices(devices);
    }

    public Device[] search(String parameter, String value) {
        switch (parameter) {
            case "manufacturer":
                return searchByManufacturer(value);
            case "model":
                return searchByModel(value);
            case "name":
                return searchByName(value);
            case "capacity":
                return searchByCapacity(value);
            case "speedUsb":
                return searchBySpeedUsb(value);
            case "spindleSpeed":
                return searchBySpindleSpeed(value);
            case "recordingSpeed":
                return searchByRecordingSpeed(value);
            default:
                break;
        }
        return null;
    }

    public Device[] search(String parameter, int value) {
        if (parameter.equals("count")) {
            return searchByCount(value);
        }
        return null;
    }

    /**
     * @param devices the devices to set
     */
    public void setDevices(Device[] devices) {
        this.devices = devices;
    }

    private Device[] searchByManufacturer(String value) {
        int devicesLen = devices.length;
        DeviceArray deviceArray = new DeviceArray();
        for (int i = 0; i < devicesLen; i++) {
            if (devices[i].getManufacturer().equals(value)) {
                deviceArray.addDevice(devices[i]);
            }
        }
        if (!deviceArray.isEmpty()) {
            return deviceArray.getDevices();
        }
        return null;
    }

    public Device[] searchByModel(String value) {
        int devicesLen = devices.length;
        DeviceArray deviceArray = new DeviceArray();
        for (int i = 0; i < devicesLen; i++) {
            if (devices[i].getModel().equals(value)) {
                deviceArray.addDevice(devices[i]);
            }
        }
        if (!deviceArray.isEmpty()) {
            return deviceArray.getDevices();
        }
        return null;
    }

    public Device[] searchByName(String value) {
        int devicesLen = devices.length;
        DeviceArray deviceArray = new DeviceArray();
        for (int i = 0; i < devicesLen; i++) {
            if (devices[i].getName().equals(value)) {
                deviceArray.addDevice(devices[i]);
            }
        }
        if (!deviceArray.isEmpty()) {
            return deviceArray.getDevices();
        }
        return null;
    }

    public Device[] searchByCapacity(String value) {
        int devicesLen = devices.length;
        DeviceArray deviceArray = new DeviceArray();
        for (int i = 0; i < devicesLen; i++) {
            if (devices[i].getCapacity().equals(value)) {
                deviceArray.addDevice(devices[i]);
            }
        }
        if (!deviceArray.isEmpty()) {
            return deviceArray.getDevices();
        }
        return null;
    }

    public Device[] searchByCount(int value) {
        int devicesLen = devices.length;
        DeviceArray deviceArray = new DeviceArray();
        for (int i = 0; i < devicesLen; i++) {
            if (devices[i].getCount() == value) {
                deviceArray.addDevice(devices[i]);
            }
        }
        if (!deviceArray.isEmpty()) {
            return deviceArray.getDevices();
        }
        return null;
    }

    public Device[] searchBySpeedUsb(String value) {
        int devicesLen = devices.length;
        DeviceArray deviceArray = new DeviceArray();
        for (int i = 0; i < devicesLen; i++) {
            if (devices[i] instanceof Usb) {
                Usb usb = (Usb) devices[i];
                if (usb.getSpeedUsb().equals(value)) {
                    deviceArray.addDevice(devices[i]);
                }
            }
        }
        if (!deviceArray.isEmpty()) {
            return deviceArray.getDevices();
        }
        return null;
    }

    public Device[] searchBySpindleSpeed(String value) {
        int devicesLen = devices.length;
        DeviceArray deviceArray = new DeviceArray();
        for (int i = 0; i < devicesLen; i++) {
            if (devices[i] instanceof PortableHardDrive) {
                PortableHardDrive phd = (PortableHardDrive) devices[i];
                if (phd.getSpindleSpeed().equals(value)) {
                    deviceArray.addDevice(devices[i]);
                }
            }
        }
        if (!deviceArray.isEmpty()) {
            return deviceArray.getDevices();
        }
        return null;
    }

    public Device[] searchByRecordingSpeed(String value) {
        int devicesLen = devices.length;
        DeviceArray deviceArray = new DeviceArray();
        for (int i = 0; i < devicesLen; i++) {
            if (devices[i] instanceof Dvd) {
                Dvd dvd = (Dvd) devices[i];
                if (dvd.getRecordingSpeed().equals(value)) {
                    deviceArray.addDevice(devices[i]);
                }
            }
        }
        if (!deviceArray.isEmpty()) {
            return deviceArray.getDevices();
        }
        return null;
    }

}

public class JavaApplication27_4 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        System.out.println("\"da.addDevice(...)\"");
        DeviceArray da = new DeviceArray();
        da.addDevice(new Usb("DataTraveler", "SE9", "Kingston", "32GB", 5, "16.89MB/s"));
        da.addDevice(new PortableHardDrive("Transcend", "25M3", "StoreJet", "500GB", 1, "5400rpm"));
        da.addDevice(new Dvd("Verbatim", "RW", "DVD", "4,7 GB", 4, "16x"));
        System.out.println(da.print());
        System.out.println("");
        System.out.println("");

        System.out.println("\"da.removeElementAt(1)\"");
        da.removeElementAt(1);
        System.out.println(da.print());
        System.out.println("");
        System.out.println("");

        System.out.println("\"da.changeParameters(1, \"...\")\"");
        da.changeParameters(1, "manufacturer", "Manufacturer");
        da.changeParameters(1, "model", "Model");
        da.changeParameters(1, "name", "Name");
        da.changeParameters(1, "capacity", "Capacity");
        da.changeParameters(1, "count", "0");
        da.changeParameters(1, "recordingSpeed", "0");
        System.out.println(da.printByIndex(1));
        System.out.println("");

        System.out.println("\"searcher.search(\"speedUsb\", \"16.89MB/s\")\"");
        Searcher searcher = new Searcher(da.getDevices());
        Device[] search = searcher.search("speedUsb", "16.89MB/s");
        if (search != null) {
            for (int i = 0; i < search.length; i++) {
                System.out.println(search[i].print());
            }
        }
    }

}

run:
"da.addDevice(...)"
index:              0
device type:        Usb
manufacturer:       DataTraveler
model:              SE9
name:               Kingston
capacity:           32GB
count:              5
speed usb:          16.89MB/s

index:              1
device type:        PortableHardDrive
manufacturer:       Transcend
model:              25M3
name:               StoreJet
capacity:           500GB
count:              1
spindle speed:      5400rpm

index:              2
device type:        Dvd
manufacturer:       Verbatim
model:              RW
name:               DVD
capacity:           4,7 GB
count:              4
recording speed:    16x


"da.removeElementAt(1)"
index:              0
device type:        Usb
manufacturer:       DataTraveler
model:              SE9
name:               Kingston
capacity:           32GB
count:              5
speed usb:          16.89MB/s

index:              1
device type:        Dvd
manufacturer:       Verbatim
model:              RW
name:               DVD
capacity:           4,7 GB
count:              4
recording speed:    16x


"da.changeParameters(1, "...")"
device type:        Dvd
manufacturer:       Manufacturer
model:              Model
name:               Name
capacity:           Capacity
count:              0
recording speed:    0

"searcher.search("speedUsb", "16.89MB/s")"
device type:        Usb
manufacturer:       DataTraveler
model:              SE9
name:               Kingston
capacity:           32GB
count:              5
speed usb:          16.89MB/s
СБОРКА УСПЕШНО ЗАВЕРШЕНА (общее время: 0 секунд)

