/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javafxapplication24_3;

import java.util.Random;
import javafx.application.Application;
//import javafx.event.ActionEvent;
//import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
//import javafx.scene.control.Button;
import javafx.scene.control.Label;
//import javafx.scene.control.ScrollPane;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.RowConstraints;
//import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

/**
 *
 * @author Lubc_iz61
 */
class ShowAnimals {

    private Stage primaryStage;
    private GridPane gridpane;
    private Label labelTtl;
    private VBox root;
    private Scene scene;
    private String ttlTable;
    private int paddingSize;
    private int colms;
    private int rows;
    private double len;
    private String backColor;
    private String backTableColor;
    private int count = 0;
    private Animal[] animals;
    private int indexSelected = -1;

    public ShowAnimals(Stage primaryStage) {
        this(primaryStage, "Animal Select", 10, 3, 3, 100, "#ffffff", "#5c7689");
    }

    public ShowAnimals(Stage primaryStage, String ttlTable, int paddingSize, int colms, int rows, double len, String backColor, String backTableColor) {
        setPrimaryStage(primaryStage);
        setTtlTable(ttlTable);
        setPaddingSize(paddingSize);
        setColms(colms);
        setRows(rows);
        setLen(len);
        setBackColor(backColor);
        setBackTableColor(backTableColor);
        animals = new Animal[colms * rows];
        start();
        stageShow();
        appProgress();
    }

    public void start() {
        gridpane = new GridPane();
        gridpane.setPadding(new Insets(paddingSize));
        gridpane.setStyle("-fx-background-color:" + backTableColor);
        gridpane.setGridLinesVisible(true);
        ColumnConstraints[] columnsArray = new ColumnConstraints[colms];
        for (int i = 0; i < colms; i++) {
            columnsArray[i] = new ColumnConstraints(len);
        }
        RowConstraints[] rowsArray = new RowConstraints[rows];
        for (int i = 0; i < rows; i++) {
            rowsArray[i] = new RowConstraints(len);
        }
        gridpane.getColumnConstraints().addAll(columnsArray);
        gridpane.getRowConstraints().addAll(rowsArray);

        labelTtl = new Label(ttlTable);
        labelTtl.setPrefWidth((int) (colms * len * 0.9));
        labelTtl.setWrapText(true);
        labelTtl.setTextFill(Color.web(backTableColor));
        labelTtl.setFont(new Font("Arial", 18));
        labelTtl.setPadding(new Insets(paddingSize));

        root = new VBox();
        root.setStyle("-fx-background-color:" + backColor);
        root.getChildren().add(gridpane);
        root.getChildren().add(labelTtl);

        primaryStage.setTitle(ttlTable);
        primaryStage.setResizable(false);
        Random r = new Random();
        Image icon = new Image("/images/img" + r.nextInt(10) + ".png", 20, 20, false, false);
        primaryStage.getIcons().add(icon); // иконка приложения

        scene = new Scene(root, (colms * len + paddingSize), (rows * len + paddingSize * 5));
        primaryStage.setScene(scene);
    }

    public void stageShow() {
        primaryStage.show();
    }

    public void appProgress() {
        scene.setOnKeyPressed((KeyEvent t) -> {
            if (t.getCode() == KeyCode.ENTER) {
                eatAnimal(indexSelected);
            } else if (t.getCode() == KeyCode.SPACE) {
                saysAnimal(indexSelected);
            } else if (t.getCode() == KeyCode.DIGIT0) {
                selectAnimal(0);
            } else if (t.getCode() == KeyCode.DIGIT1) {
                selectAnimal(1);
            } else if (t.getCode() == KeyCode.DIGIT2) {
                selectAnimal(2);
            } else if (t.getCode() == KeyCode.DIGIT3) {
                selectAnimal(3);
            } else if (t.getCode() == KeyCode.DIGIT4) {
                selectAnimal(4);
            } else if (t.getCode() == KeyCode.DIGIT5) {
                selectAnimal(5);
            } else if (t.getCode() == KeyCode.DIGIT6) {
                selectAnimal(6);
            } else if (t.getCode() == KeyCode.DIGIT7) {
                selectAnimal(7);
            } else if (t.getCode() == KeyCode.DIGIT8) {
                selectAnimal(8);
            } else if (t.getCode() == KeyCode.DIGIT9) {
                selectAnimal(9);
            }
        });
    }

    /**
     * @return the ttlTable
     */
    public String getTtlTable() {
        return ttlTable;
    }

    /**
     * @param ttlTable the ttlTable to set
     */
    public void setTtlTable(String ttlTable) {
        this.ttlTable = ttlTable;
    }

    /**
     * @return the paddingSize
     */
    public int getPaddingSize() {
        return paddingSize;
    }

    /**
     * @param paddingSize the paddingSize to set
     */
    public void setPaddingSize(int paddingSize) {
        this.paddingSize = paddingSize;
    }

    /**
     * @return the colms
     */
    public int getColms() {
        return colms;
    }

    /**
     * @param colms the colms to set
     */
    private void setColms(int colms) {
        this.colms = colms;
    }

    /**
     * @return the rows
     */
    public int getRows() {
        return rows;
    }

    /**
     * @param rows the rows to set
     */
    private void setRows(int rows) {
        this.rows = rows;
    }

    /**
     * @return the len
     */
    public double getLen() {
        return len;
    }

    /**
     * @param len the len to set
     */
    private void setLen(double len) {
        this.len = len;
    }

    /**
     * @return the backColor
     */
    public String getBackColor() {
        return backColor;
    }

    /**
     * @param backColor the backColor to set
     */
    private void setBackColor(String backColor) {
        this.backColor = backColor;
    }

    /**
     * @return the backTableColor
     */
    public String getBackTableColor() {
        return backTableColor;
    }

    /**
     * @param backTableColor the backTableColor to set
     */
    private void setBackTableColor(String backTableColor) {
        this.backTableColor = backTableColor;
    }

    /**
     * @return the count
     */
    public int getCount() {
        return count;
    }

    /**
     * @param primaryStage the primaryStage to set
     */
    public void setPrimaryStage(Stage primaryStage) {
        this.primaryStage = primaryStage;
    }

    public void addAnimal(Animal a) {
        if (count + 1 <= colms * rows) {
            int y = 0;
            int x = 0;
            y = count / colms;
            x = count - y * colms;
            animals[count] = a;
            gridpane.add(a.getBorderPane(), x, y);
            count++;
        }
    }

    public void selectAnimal(int index) {
        if (index >= 0 && index < count) {
            if (!animals[index].isSelected()) {
                for (int i = 0; i < count; i++) {
                    animals[i].resetSelected();
                }
                indexSelected = index;
                animals[index].setSelected();
                labelTtl.setText(animals[index].getName());
            }
        }
    }

    public void eatAnimal(int index) {
        if (index >= 0 && index < count) {
            labelTtl.setText(animals[index].animalEat());
        }
    }

    public void saysAnimal(int index) {
        if (index >= 0 && index < count) {
            labelTtl.setText(animals[index].animalSay());
        }
    }
}

abstract class Animal {

    private String name;
    private String imgName;
    private Image img;
    private ImageView imgView;
    private BorderPane borderPane;
    private boolean selected = false;

    public Animal() {

    }

    public Animal(String name, String imgName) {
        setName(name);
        setImgView(imgName);
    }

    public void setImgView(String imgName) {
        img = new Image("/images/" + imgName + ".png", 80, 80, false, false);
        imgView = new ImageView(img);
        borderPane = new BorderPane();
        borderPane.setCenter(imgView);
    }

    public ImageView getImgView() {
        return imgView;
    }

    public BorderPane getBorderPane() {
        return borderPane;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the imgName
     */
    public String getImgName() {
        return imgName;
    }

    /**
     * @param imgName the imgName to set
     */
    public void setImgName(String imgName) {
        this.imgName = imgName;
    }

    /**
     * @return the selected
     */
    public boolean isSelected() {
        return selected;
    }

    /**
     * @param selected the selected to set
     */
    public void setSelected() {
        selected = true;
        DropShadow dropShadow = new DropShadow(30, Color.AQUA);
        imgView.setEffect(dropShadow);
    }

    /**
     * @param selected the selected to reset
     */
    public void resetSelected() {
        selected = false;
        imgView.setEffect(null);
    }

    abstract public String animalEat();

    abstract public String animalSay();

}

class Donkey extends Animal {

    Donkey() {
        super("Donkey", "img0");
    }

    @Override
    public String animalEat() {
        return getName() + " eats carrot";
    }

    @Override
    public String animalSay() {
        return getName() + " says Ia-Ia";
    }
}

class Cow extends Animal {

    Cow() {
        super("Cow", "img1");
    }

    @Override
    public String animalEat() {
        return getName() + " eats hay";
    }

    @Override
    public String animalSay() {
        return getName() + " says Mu-Mu";
    }
}

class Dog extends Animal {

    Dog() {
        super("Dog", "img2");
    }

    @Override
    public String animalEat() {
        return getName() + " eats bone";
    }

    @Override
    public String animalSay() {
        return getName() + " says Gav-Gav";
    }
}

class Sheep extends Animal {

    Sheep() {
        super("Sheep", "img3");
    }

    @Override
    public String animalEat() {
        return getName() + " eats grass";
    }

    @Override
    public String animalSay() {
        return getName() + " says Be-Beee";
    }
}

class Pig extends Animal {

    Pig() {
        super("Pig", "img4");
    }

    @Override
    public String animalEat() {
        return getName() + " eats acorns";
    }

    @Override
    public String animalSay() {
        return getName() + " says Hru-Hru";
    }
}

class Goat extends Animal {

    Goat() {
        super("Goat", "img5");
    }

    @Override
    public String animalEat() {
        return getName() + " eats cabbage";
    }

    @Override
    public String animalSay() {
        return getName() + " says Me-Meee";
    }
}

class Rooster extends Animal {

    Rooster() {
        super("Rooster", "img6");
    }

    @Override
    public String animalEat() {
        return getName() + " eats rice";
    }

    @Override
    public String animalSay() {
        return getName() + " says Ku-Ka-Re-Ky";
    }
}

class Cat extends Animal {

    Cat() {
        super("Cat", "img7");
    }

    @Override
    public String animalEat() {
        return getName() + " eats milk";
    }

    @Override
    public String animalSay() {
        return getName() + " says Myau-Myau";
    }
}

class Duck extends Animal {

    Duck() {
        super("Duck", "img8");
    }

    @Override
    public String animalEat() {
        return getName() + " eats duckweed";
    }

    @Override
    public String animalSay() {
        return getName() + " says Krya-Krya";
    }
}

class Horse extends Animal {

    Horse() {
        super("Horse", "img9");
    }

    @Override
    public String animalEat() {
        return getName() + " eats oats";
    }

    @Override
    public String animalSay() {
        return getName() + " says Igo-Go";
    }
}

public class JavaFXApplication24_3 extends Application {

    @Override
    public void start(Stage primaryStage) {
        ShowAnimals showAnimals = new ShowAnimals(primaryStage);
        showAnimals.addAnimal(new Cow());
        showAnimals.addAnimal(new Donkey());
        showAnimals.addAnimal(new Dog());

        showAnimals.addAnimal(new Pig());
        showAnimals.addAnimal(new Rooster());
        showAnimals.addAnimal(new Horse());

        showAnimals.addAnimal(new Cat());
        showAnimals.addAnimal(new Sheep());
        showAnimals.addAnimal(new Goat());

        showAnimals.addAnimal(new Duck());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}
