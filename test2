/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication14_2;

/**
 *
 * @author Oyla
 */
public class JavaApplication14_2 {

    public static void main(String[] args) {

        // task14();
        TurtleMoving t = new TurtleMoving(3);
        System.out.println(t.showBoard());
    }

    /**
     * 13. Ход конём.
     */
    public static void task13() {
        int size = 8;
        int step = 1;
        int x = 6;
        int y = 0;
        int[][] chess = new int[size][size];

        chess = moveHorse(x, y, step, size, chess);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.printf("%3d", chess[i][j]);
            }
            System.out.println("");
        }
    }

    public static int[][] moveHorse(int x, int y, int step, int size, int[][] chess) {
        int[] xMove = {-1, 1, -1, 1, -2, -2, 2, 2};
        int[] yMove = {2, 2, -2, -2, 1, -1, -1, 1};
        boolean state = true;
        chess[x][y] = step;
        int x1;
        int y1;
        for (int i = 0; i < xMove.length; i++) {
            x1 = x + xMove[i];
            y1 = y + yMove[i];

            if ((x1 >= 0) && (y1 >= 0) && (x1 < size) && (y1 < size) && (chess[x1][y1] == 0)) {
                for (int k = 0; k < size; k++) {
                    for (int l = 0; l < size; l++) {
                        if (step > 1 && chess[k][l] == (step + 1)) {
                            state = false;
                        }
                    }
                }
                if (state) {
                    moveHorse(x1, y1, step + 1, size, chess);
                }
            }
        }
        if (!state) {
            for (int k = 0; k < size; k++) {
                for (int l = 0; l < size; l++) {
                    if (step > 1 && chess[k][l] >= step) {
                        chess[k][l] = 0;
                    }
                }
            }
        }
        return chess;
    }

    /**
     * 14. 8 ферзей.
     */
    public static void task14() {
        int size = 8;
        int empty = size + 1;
        int queen = size + 2;
        int[][] board = new int[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                board[i][j] = empty;
            }
        }
        board = setQueen(0, size, board);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (board[i][j] == queen) {
                    System.out.printf("%2s", "Q");
                } else {
                    System.out.printf("%2s", "*");
                }
            }
            System.out.println("");
        }
    }

    public static int[][] setQueen(int y, int size, int[][] board) {
        int minX = 0;
        int maxX = 0;
        int empty = size + 1;
        int queen = size + 2;
        boolean state = false;
        for (int i = 0; i < size; i++) {
            if (board[y][i] == empty) {
                board[y][i] = queen;
                for (int k = 0; k < size; k++) {
                    minX = i - y + k;
                    maxX = i + y - k;
                    for (int l = 0; l < size; l++) {
                        if (board[k][l] == empty && (k == y || l == i)) {
                            board[k][l] = y;
                        }
                        if (board[k][l] == empty && minX >= 0 && minX < size && minX == l) {
                            board[k][l] = y;
                        }
                        if (board[k][l] == empty && maxX >= 0 && maxX < size && maxX == l) {
                            board[k][l] = y;
                        }
                    }
                }
                if (y + 1 < size) {
                    setQueen(y + 1, size, board);
                }
            }
            if (board[y][i] == queen) {
                state = true;
            }
        }
        if (!state) {
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    if (board[i][j] == y - 1 || (y - 1 == i && board[i][j] == queen)) {
                        board[i][j] = empty;
                    }
                }
            }
        }
        return board;
    }
}

/**
 * 15. Черепашка.
 *
 * @author Oyla
 */
class TurtleMoving {

    static String[][] board;
    static int N;
    static int min = 1;
    static int max = 100;
    static int[] moveX = {1, 0};
    static int[] moveY = {0, 1};
    static int maxSum = 0;
    static String maxSteps = "";

    public TurtleMoving() {
        this(5);
    }

    public TurtleMoving(int N) {
        this.N = N;
        board = new String[N][N];
        int strFormat = 1;
        while (max / Math.pow(10, strFormat) > 1) {
            strFormat++;
        }
        strFormat += 3;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                board[i][j] = String.format("%" + strFormat + "d", (int) (Math.random() * (max - min + 1) + min));
            }
        }
        int y = 0;
        int x = 0;
        int step = 0;
        board[y][x] = String.format("%" + strFormat + "s", "T");
        moveTurtle(0, 0, 0, "");
        for (int i = 0; i < maxSteps.length(); i++) {
            step = Integer.parseInt(maxSteps.substring(i, i + 1));
            y += moveY[step];
            x += moveX[step];
            board[y][x] = String.format("%" + strFormat + "s", "*" + board[y][x].trim());
        }
    }

    public void moveTurtle(int y, int x, int sum, String steps) {
        int newY = y;
        int newX = x;

        if (y == (N - 1) && x == (N - 1)) {
            if (sum > maxSum) {
                maxSum = sum;
                maxSteps = steps;
            }
        }
        for (int i = 0; i < moveX.length; i++) {
            newY = y + moveY[i];
            newX = x + moveX[i];
            if (newX < N && newY < N) {
                moveTurtle(newY, newX, sum + Integer.parseInt(board[newY][newX].trim()), steps + i);
            }
        }
    }

    public String showBoard() {
        String s = "";
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                s += board[i][j];
            }
            s += "\n";
        }
        return s;
    }
}
