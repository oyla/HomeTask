/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication27_1;

/**
 *
 * @author user
 */
abstract class MyCollection<T> {

    private String name;

    public MyCollection() {
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the count
     */
    abstract public int getCount();

    abstract public void add(T value);

    abstract public boolean remove(T value);

    abstract public String print();

    abstract public int search(T value);

    abstract public boolean replace(int index, T value);

    abstract public boolean sort();

}

class MyArrayList<T extends Number> extends MyCollection<T> {

    private int count;
    private Number[] data;
    private int capacity = 10;

    public MyArrayList() {
        data = new Number[capacity];
    }

    @Override
    public int getCount() {
        return count;
    }

    @Override
    public void add(T value) {
        ensureCapacity(count + 1);
        data[count] = value;
        count++;
    }

    private void ensureCapacity(int arrLength) {
        if (arrLength > capacity) {
            int newLength = (arrLength * 3) / 2 + 1;
            setCapacity(newLength);
        }
    }

    /**
     * @param capacity the capacity to set
     */
    public void setCapacity(int capacity) {
        if (isEmpty()) {
            if (capacity <= count) {
                capacity = 10;
            }
            data = new Number[capacity];
            this.capacity = capacity;

        } else if (capacity <= count) {
            trimToSize();
        } else {
            this.capacity = capacity;
            overwriteData(capacity);
        }
    }

    public boolean isEmpty() {
        return count == 0;
    }

    public void trimToSize() {
        capacity = getCount();
        overwriteData(capacity);
    }

    public void overwriteData(int newLength) {
        Number[] temp = new Number[capacity];
        for (int i = 0; i < count; i++) {
            temp[i] = getElementAt(i);
        }
        data = temp;
    }

    public T getElementAt(int index) {
        if (index >= 0 && index < count) {
            T value = (T) data[index];
            return value;
        }
        return null;
    }

    @Override
    public boolean remove(T value) {
        boolean removeDone = false;
        while (search(value) != -1) {
            removeDone = removeAt(search(value));
        }
        return removeDone;
    }

    @Override
    public String print() {
        if (isEmpty()) {
            return "Collection is empty.";
        } else {
            String s = "";
            for (int i = 0; i < count; i++) {
                s += data[i].toString() + "  ";
            }
            return s;
        }
    }

    @Override
    public int search(T value) {
        for (int i = 0; i < count; i++) {
            if (CompareObjects.compareValues(data[i], value) == 0) {
                return i;
            }
        }
        return -1;

    }

    public boolean removeAt(int index) {
        if (index >= 0 && index < count) {
            for (int i = index; i < count - 1; i++) {
                data[i] = data[i + 1];
            }
            count--;
            return true;
        }
        return false;
    }

    @Override
    public boolean replace(int index, T value) {
        if (index >= 0 && index < count) {
            data[index] = value;
            return true;
        }
        return false;
    }

    @Override
    public boolean sort() {
        boolean sortDone = false;
        Number temp;
        for (int i = 0; i < count - 1; i++) {
            for (int j = i + 1; j < count; j++) {
                if (CompareObjects.compareValues(data[i], data[j]) == 1) {
                    temp = data[i];
                    data[i] = data[j];
                    data[j] = temp;
                    sortDone = true;
                }
            }
        }
        return sortDone;
    }
}

class SLL<T extends Number> extends MyCollection<T> {

    private Node head;
    private Node tail;
    private int count = 0;

    public SLL() {

    }

    class Node {

        T data;
        Node next;
    }

    @Override
    public int getCount() {
        return count;
    }

    @Override
    public void add(T value) {
        Node newElem = new Node();
        newElem.data = value;
        if (tail == null) {
            head = newElem;
        } else {
            tail.next = newElem;
        }
        tail = newElem;
        count++;
    }

    @Override
    public boolean remove(T value) {
        boolean removeValue = false;
        while (search(value) != -1) {
            removeValue = removeAt(search(value));
        }
        return removeValue;
    }

    public boolean removeAt(int index) {

        if (!isEmpty() && index >= 0 && index < count) {
            if (index == 0) {
                head = head.next;
                if (head == null) {
                    tail = null;
                }
            } else {
                Node temp = head;
                Node prev = null;
                int i = 0;
                while (i < index) {
                    prev = temp;
                    temp = temp.next;
                    i++;
                }
                prev.next = temp.next;
                if (index == count - 1) {
                    tail = prev;
                }
            }
            count--;
            return true;
        }
        return false;
    }

    public boolean isEmpty() {
        return count == 0;
    }

    @Override
    public String print() {
        if (isEmpty()) {
            return "Collection is empty.";
        } else {
            String s = "";
            Node temp = head;
            while (temp != null) {
                s += temp.data.toString() + "  ";
                temp = temp.next;
            }
            return s;
        }
    }

    @Override
    public int search(T value) {
        if (!isEmpty()) {
            Node temp = head;
            int i = 0;
            while (i < count) {
                if (CompareObjects.compareValues(temp.data, value) == 0) {
                    return i;
                }
                i++;
                temp = temp.next;
            }
        }
        return -1;
    }

    @Override
    public boolean replace(int index, T value) {
        if (!isEmpty() && index >= 0 && index < count) {
            Node temp = head;
            int i = 0;
            while (i < index) {
                i++;
                temp = temp.next;
            }
            temp.data = value;
            return true;
        }
        return false;
    }

    @Override
    public boolean sort() {
        boolean sortDone = false;
        int i = 0;
        int j;
        Node temp = head;
        Node temp2;
        T dataTemp1;
        T dataTemp2;
        int minIndex;
        while (i < count - 1) {
            dataTemp1 = temp.data;
            minIndex = i;
            j = i + 1;
            temp2 = temp.next;
            while (j < count) {
                dataTemp2 = temp2.data;
                if (CompareObjects.compareValues(dataTemp1, dataTemp2) == 1) {
                    dataTemp1 = dataTemp2;
                    minIndex = j;
                    sortDone = true;
                }
                j++;
                temp2 = temp2.next;
            }
            if (minIndex != i) {
                replace(minIndex, temp.data);
                temp.data = dataTemp1;
            }
            i++;
            temp = temp.next;
        }
        return sortDone;
    }
}

class DLL<T extends Number> extends MyCollection<T> {

    private Node head;
    private Node tail;
    private int count = 0;

    class Node {

        T data;
        Node next;
        Node prev;
    }

    public boolean isEmpty() {
        return count == 0;
    }

    @Override
    public int getCount() {
        return count;
    }

    @Override
    public void add(T value) {
        Node temp = new Node();
        temp.data = value;
        temp.prev = tail;
        if (isEmpty()) {
            head = temp;
        } else {
            tail.next = temp;
        }
        tail = temp;
        count++;
    }

    @Override
    public boolean remove(T value) {
        boolean removeValue = false;
        while (search(value) != -1) {
            removeValue = removeAt(search(value));
        }
        return removeValue;
    }

    public boolean removeAt(int index) {
        if (!isEmpty() && index >= 0 && index < count) {
            if (index == 0) {
                head = head.next;
                if (head == null) {
                    tail = null;
                } else {
                    head.prev = null;
                }
            } else if (index == count - 1) {
                tail = tail.prev;
                tail.next = null;
            } else {
                int i = 0;
                Node temp = head;
                while (i < index) {
                    i++;
                    temp = temp.next;
                }
                temp.prev.next = temp.next;
                temp.next.prev = temp.prev;
            }
            count--;
            return true;
        }
        return false;
    }

    @Override
    public String print() {
        if (isEmpty()) {
            return "Collection is empty.";
        }
        String s = "";
        Node temp = head;
        while (temp != null) {
            s += temp.data.toString() + "  ";
            temp = temp.next;
        }
        return s;
    }

    @Override
    public int search(T value) {
        Node temp = head;
        int i = 0;
        while (i < count) {
            if (CompareObjects.compareValues(temp.data, value) == 0) {
                return i;
            }
            i++;
            temp = temp.next;
        }
        return -1;
    }

    @Override
    public boolean replace(int index, T value) {
        if (!isEmpty() && index >= 0 && index < count) {
            Node temp = head;
            int i = 0;
            while (i < index) {
                i++;
                temp = temp.next;
            }
            temp.data = value;
            return true;
        }
        return false;
    }

    @Override
    public boolean sort() {
        boolean sortDone = false;
        int i = 0;
        int j;
        Node temp = head;
        Node temp2;
        T dataTemp1;
        T dataTemp2;
        int minIndex;
        while (i < count - 1) {
            dataTemp1 = temp.data;
            minIndex = i;
            j = i + 1;
            temp2 = temp.next;
            while (j < count) {
                dataTemp2 = temp2.data;
                if (CompareObjects.compareValues(dataTemp1, dataTemp2) == 1) {
                    dataTemp1 = dataTemp2;
                    minIndex = j;
                    sortDone = true;
                }
                j++;
                temp2 = temp2.next;
            }
            if (minIndex != i) {
                replace(minIndex, temp.data);
                temp.data = dataTemp1;
            }
            i++;
            temp = temp.next;
        }
        return sortDone;
    }

}

class Tree<T extends Number> extends MyCollection<T> {

    class Node {

        private Number value;
        private Node parent;
        private Node right;
        private Node left;

        /**
         * @return the value
         */
        public Number getValue() {
            return value;
        }

        /**
         * @param value the value to set
         */
        public void setValue(T value) {
            this.value = value;
        }

    }
    private Node root;

    public Tree() {

    }

    @Override
    public int getCount() {
        int count = 0;
        count = getCount(root, count);
        return count;
    }

    private int getCount(Node elem, int count) {
        if (elem != null) {
            count = getCount(elem.left, count);
            count++;
            count = getCount(elem.right, count);
        }
        return count;
    }

    public boolean isEmpty() {
        return root == null;
    }

    public Node getRoot() {
        return root;
    }

    public Node findNode(Number value) {
        if (isEmpty()) {
            return null;
        } else {
            Node f = root;
            while (true) {
                if (CompareObjects.compareValues(f.value, value) == 1) {
                    if (f.left != null) {
                        f = f.left;
                    } else {
                        break;
                    }
                } else if (CompareObjects.compareValues(value, f.value) == 1) {
                    if (f.right != null) {
                        f = f.right;
                    } else {
                        break;
                    }
                } else {
                    return f;
                }
            }
            return null;
        }
    }

    public void clear() {
        if (!isEmpty()) {
            clear(root);
        }
    }

    private void clear(Node elem) {
        if (elem != null) {
            clear(elem.left);
            clear(elem.right);
            elem = null;
        }
    }

    @Override
    public void add(T value) {

        if (findNode(value) != null) {
            return;
        }

        Node n = new Node();
        n.right = n.left = null;
        n.value = value;
        Node parent = null;
        if (isEmpty()) {
            root = n;
            root.parent = parent;
        } else {
            Node p = root;
            while (p != null) {
                parent = p;
                if (CompareObjects.compareValues(n.value, p.value) == 1) {
                    p = p.right;
                } else {
                    p = p.left;
                }
            }
            if (CompareObjects.compareValues(parent.value, n.value) == 1) {
                parent.left = n;
            } else {
                parent.right = n;
            }
            n.parent = parent;
        }
    }

    @Override
    public boolean remove(Number value) {
        Node d = findNode(value);
        if (d == null) {
            return false;
        }

        if (d == root && getCount() == 1) {
            clear();
            return false;
        }
        Node parent = d.parent;
        int index = 0;
        // нет потомков
        if (d.left == null && d.right == null) {
            if (parent.left == d) {
                parent.left = null;
            } else {
                parent.right = null;
            }
            return true;
        }

        // есть правый потомок, но нет левого
        if (d.left == null && d.right != null) {
            if (d == root) {
                root = d.right;
                d.right.parent = null;
            } else {
                if (parent.left == d) {
                    parent.left = d.right;
                } else {
                    parent.right = d.right;
                }
                d.right.parent = parent;
            }
            return true;
        }

        // есть левый, но нет правого потомка
        if (d.left != null && d.right == null) {
            if (d == root) {
                root = d.left;
                d.left.parent = null;
            } else {
                if (parent.left == d) {
                    parent.left = d.left;
                } else {
                    parent.right = d.left;
                }
                d.left.parent = parent;
            }
            return true;
        }

        // есть оба потомка
        if (d.left != null && d.right != null) {
            Node r = d.right;
            if (r.right == null && r.left == null) {
                d.value = r.value;
                d.right = null;
            } else if (r.left != null) {
                Node p = r.left;

                while (p.left != null) {
                    p = p.left;
                }

                d.value = p.value;

                if (p.right == null) {
                    p.parent.left = null;
                } else {
                    p.parent.left = p.right;
                }
            } else {
                d.value = r.value;
                d.right = r.right;
            }
        }
        return true;
    }

    @Override
    public String print() {
        if (isEmpty()) {
            return "Collection is empty.";
        }
        return dataString(root);
    }

    private String dataString(Node elem) {
        String s = "";
        if (elem != null) {
            s += dataString(elem.left);
            s += elem.getValue().toString() + "  ";
            s += dataString(elem.right);
            return s;
        }
        return "";
    }

    @Override
    public int search(T value) {
        String[] data = dataString(root).split("\\s+");
        String valueString = value.toString();
        for (int i = 0; i < data.length; i++) {
            if (valueString.equals(data[i])) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public boolean replace(int index, T value) {
        if (!isEmpty() && index >= 0 && index < getCount()) {
            String[] data = dataString(root).split("\\s+");
            if (value instanceof Integer) {
                remove(new Integer(data[index]));
            } else if (value instanceof Double) {
                remove(new Double(data[index]));
            } else if (value instanceof Float) {
                remove(new Float(data[index]));
            } else if (value instanceof Short) {
                remove(new Short(data[index]));
            } else if (value instanceof Long) {
                remove(new Long(data[index]));
            } else if (value instanceof Byte) {
                remove(new Byte(data[index]));
            }
            add(value);
            return true;
        }
        return false;
    }

    @Override
    public boolean sort() {
        boolean sortDone = false;
        if (!isEmpty()) {
            Node f = root;
            Number data;
            while (f.left != null) {
                data = f.value;
                f = root;
                remove(data);
                add((T) data);
                sortDone = true;
            }
        }
        return sortDone;
    }

}

final class CompareObjects {

    public static int compareValues(Number a, Number b) {
        if ((a instanceof Integer) && (b instanceof Integer)) {
            return compareValuesInteger(a, b);
        } else if ((a instanceof Float) && (b instanceof Float)) {
            return compareValuesFloat(a, b);
        } else if ((a instanceof Double) && (b instanceof Double)) {
            return compareValuesDouble(a, b);
        } else if ((a instanceof Byte) && (b instanceof Byte)) {
            return compareValuesByte(a, b);
        } else if ((a instanceof Short) && (b instanceof Short)) {
            return compareValuesShort(a, b);
        } else if ((a instanceof Long) && (b instanceof Long)) {
            return compareValuesLong(a, b);
        }
        return -2;
    }

    public static int compareValuesInteger(Number a, Number b) {
        if (a.intValue() > b.intValue()) {
            return 1;
        } else if (a.intValue() < b.intValue()) {
            return -1;
        }
        return 0;
    }

    public static int compareValuesFloat(Number a, Number b) {
        if (a.floatValue() > b.floatValue()) {
            return 1;
        } else if (a.floatValue() < b.floatValue()) {
            return -1;
        }
        return 0;
    }

    public static int compareValuesDouble(Number a, Number b) {
        if (a.doubleValue() > b.doubleValue()) {
            return 1;
        } else if (a.doubleValue() < b.doubleValue()) {
            return -1;
        }
        return 0;
    }

    public static int compareValuesByte(Number a, Number b) {
        if (a.byteValue() > b.byteValue()) {
            return 1;
        } else if (a.byteValue() < b.byteValue()) {
            return -1;
        }
        return 0;
    }

    public static int compareValuesShort(Number a, Number b) {
        if (a.shortValue() > b.shortValue()) {
            return 1;
        } else if (a.shortValue() < b.shortValue()) {
            return -1;
        }
        return 0;
    }

    public static int compareValuesLong(Number a, Number b) {
        if (a.longValue() > b.longValue()) {
            return 1;
        } else if (a.longValue() < b.longValue()) {
            return -1;
        }
        return 0;
    }

}

public class JavaApplication27_1 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        MyArrayList<Double> myArrayList = new MyArrayList<>();
        SLL<Double> sll = new SLL<>();
        DLL<Double> dll = new DLL<>();
        Tree<Double> tree = new Tree<>();
        MyCollection[] myCollection = new MyCollection[4];
        myCollection[0] = myArrayList;
        myCollection[0].setName("MyArrayList");
        myCollection[1] = sll;
        myCollection[1].setName("SLL");
        myCollection[2] = dll;
        myCollection[2].setName("DLL");
        myCollection[3] = tree;
        myCollection[3].setName("Tree");
        double[] values = {47, 84, 1, 20, 34, 100, 1, 35, 87};

        System.out.println(String.format("%20s", "add(...)"));
        for (int j = 0; j < values.length; j++) {
            for (int i = 0; i < myCollection.length; i++) {
                myCollection[i].add(values[j]);
            }
        }
        for (int i = 0; i < myCollection.length; i++) {
            System.out.printf("%-12s", myCollection[i].getName());
            System.out.println(myCollection[i].print());
        }
        System.out.println("");

        System.out.println(String.format("%22s", "getCount()"));
        for (int i = 0; i < myCollection.length; i++) {
            System.out.printf("%-12s", myCollection[i].getName());
            System.out.println(myCollection[i].getCount());
        }
        System.out.println("");
        System.out.println(String.format("%21s", "remove(1.0)"));
        for (int i = 0; i < myCollection.length; i++) {
            myCollection[i].remove(1.0);
        }
        for (int i = 0; i < myCollection.length; i++) {
            System.out.printf("%-12s", myCollection[i].getName());
            System.out.println(myCollection[i].print());
        }
        System.out.println("");

        System.out.println(String.format("%22s", "search(100.0)"));
        for (int i = 0; i < myCollection.length; i++) {
            System.out.printf("%-12s", myCollection[i].getName());
            System.out.println(myCollection[i].search(100.0));
        }
        System.out.println("");

        System.out.println(String.format("%27s", "replace(2, 999.0)"));
        for (int i = 0; i < myCollection.length; i++) {
            myCollection[i].replace(2, 999.0);
            System.out.printf("%-12s", myCollection[i].getName());
            System.out.println(myCollection[i].print());
        }
        System.out.println("");

        System.out.println(String.format("%18s", "sort()"));
        for (int i = 0; i < myCollection.length; i++) {
            myCollection[i].sort();
            System.out.printf("%-12s", myCollection[i].getName());
            System.out.println(myCollection[i].print());
        }
    }
}

run:
            add(...)
MyArrayList 47.0  84.0  1.0  20.0  34.0  100.0  1.0  35.0  87.0  
SLL         47.0  84.0  1.0  20.0  34.0  100.0  1.0  35.0  87.0  
DLL         47.0  84.0  1.0  20.0  34.0  100.0  1.0  35.0  87.0  
Tree        1.0  20.0  34.0  35.0  47.0  84.0  87.0  100.0  

            getCount()
MyArrayList 9
SLL         9
DLL         9
Tree        8

          remove(1.0)
MyArrayList 47.0  84.0  20.0  34.0  100.0  35.0  87.0  
SLL         47.0  84.0  20.0  34.0  100.0  35.0  87.0  
DLL         47.0  84.0  20.0  34.0  100.0  35.0  87.0  
Tree        20.0  34.0  35.0  47.0  84.0  87.0  100.0  

         search(100.0)
MyArrayList 4
SLL         4
DLL         4
Tree        6

          replace(2, 999.0)
MyArrayList 47.0  84.0  999.0  34.0  100.0  35.0  87.0  
SLL         47.0  84.0  999.0  34.0  100.0  35.0  87.0  
DLL         47.0  84.0  999.0  34.0  100.0  35.0  87.0  
Tree        20.0  34.0  47.0  84.0  87.0  100.0  999.0  

            sort()
MyArrayList 34.0  35.0  47.0  84.0  87.0  100.0  999.0  
SLL         34.0  35.0  47.0  84.0  87.0  100.0  999.0  
DLL         34.0  35.0  47.0  84.0  87.0  100.0  999.0  
Tree        20.0  34.0  47.0  84.0  87.0  100.0  999.0  
СБОРКА УСПЕШНО ЗАВЕРШЕНА (общее время: 0 секунд)
